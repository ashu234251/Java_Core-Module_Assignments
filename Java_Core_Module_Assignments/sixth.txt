Q1.What is Collection in Java?
   The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
   Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.
   Java Collection means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque) and classes (ArrayList,
   Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).

Q2. Differentiate between Collection and collections in the context of Java.
    Collection: Collection is a interface present in java.util.package. It is used to represent a group of individual objects as a single unit.
    It is similar to the container in the C++ language. The collection is considered as the root interface of the collection framework. 
    It provides several classes and interfaces to represent a group of individual objects as a single unit. 
    Collections: Collections is a utility class present in java.util.package. It defines several utility methods like sorting and searching
    which is used to operate on collection. It has all static methods. These methods provide much-needed convenience to developers, allowing 
    them to effectively work with Collection Framework. For example, It has a method sort() to sort the collection elements according to default 
    sorting order, and it has a method min(), and max() to find the minimum and maximum value respectively in the collection elements.

Q3. What are the advantages of the Collection framework?
     Collection Framework is a powerful framework in java. This framework defines the most common methods that can be used for any collection of objects. 

Q4.Explain the various interfaces used in the Collection framework.
   All the Classes of the Collection Framework implement the subInterfaces of the Collection Interface. All the methods of Collection 
   interfaces are also contained in it’s subinterfaces. These subInterfaces are sometimes called as Collection Types or SubTypes of Collection. 
   These include the following:
   List: This is a child interface of the collection interface. This interface is dedicated to the data of the list type in which we can 
         store all the ordered collection of the objects. This also allows duplicate data to be present in it. This list interface is 
         implemented by various classes like ArrayList, Vector, Stack, etc. Since all the subclasses implement the list, we can instantiate
         a list object with any of these classes.
   Set: A set is an unordered collection of objects in which duplicate values cannot be stored. This collection is used when we wish to avoid 
        the duplication of the objects and wish to store only the unique objects. This set interface is implemented by various classes like HashSet,
        TreeSet, LinkedHashSet, etc. Since all the subclasses implement the set, we can instantiate a set object with any of these classes. 
   SortedSet: This interface is very similar to the set interface. The only difference is that this interface has extra methods that maintain 
              the ordering of the elements. The sorted set interface extends the set interface and is used to handle the data which needs to be sorted.
               The class which implements this interface is TreeSet.
   Queue: As the name suggests, a queue interface maintains the FIFO(First In First Out) order similar to a real-world queue line. 
          This interface is dedicated to storing all the elements where the order of the elements matter. For example, whenever we try
          to book a ticket, the tickets are sold at the first come first serve basis. Therefore, the person whose request arrives first 
          into the queue gets the ticket. There are various classes like PriorityQueue, Deque, ArrayDeque, etc. Since all these subclasses implement 
          the queue, we can instantiate a queue object with any of these classes. 
   Deque: This is a very slight variation of the queue data structure. Deque, also known as a double-ended queue, is a data structure where
          we can add and remove the elements from both the ends of the queue. This interface extends the queue interface. The class which
          implements this interface is ArrayDeque.

Q5.Differentiate between List and Set in Java.
   Explained in above

Q6.What is the Differentiate between Iterator and ListIterator in Java.
   Iterators are used in Collection framework in Java to retrieve elements one by one. It can be applied to any Collection object.
   By using Iterator, we can perform both read and remove operations. Iterator must be used whenever we want to enumerate elements 
   in all Collection framework implemented interfaces like Set, List, Queue, Deque and also in all implemented classes of Map interface.
   Iterator is the only cursor available for entire collection framework. Iterator object can be created by calling iterator() method present in Collection interface.
 
   ListIterator is only applicable for List collection implemented classes like arraylist, linkedlist etc. It provides bi-directional iteration.
   ListIterator must be used when we want to enumerate elements of List. This cursor has more functionality(methods) than iterator. 
   ListIterator object can be created by calling listIterator() method present in List interface.

Q7.What is the Differentiate between Comparable and Comparator
   Comparable and Comparator both are interfaces and can be used to sort collection elements.
   Comparable
   A comparable object is capable of comparing itself with another object. The class itself must implements 
   the java.lang.Comparable interface to compare its instances. 
   Consider a Movie class that has members like, rating, name, year. Suppose we wish to sort a list of Movies based on year of release.
   We can implement the Comparable interface with the Movie class, and we override the method compareTo() of Comparable interface. 
   
   Comparator
   Unlike Comparable, Comparator is external to the element type we are comparing. It’s a separate class. We create multiple separate 
   classes (that implement Comparator) to compare by different members.
   Collections class has a second sort() method and it takes Comparator. The sort() method invokes the compare() to sort objects.

Q8.What is collision in HashMap?
   The HashMap key contains a hashcode, and a equals() method. Whenever we insert a new entry to the Map, it checks for the hashcode. 
   It parses through the entire pool of objects, searching for similarity of the hashcode using the equals() method.

   If any entry is existent, the new value will then replace the primarily existing value. Otherwise, it will simply create a whole new key-value pair.

   Collision happens when multiple keys hash to the same bucket or, say when two or more objects have the same hashcode but are different. 
   When two keys get hashed to the same value, a linked list is formed at the bucket location, where all the information is stored as an entry of the map,
   which contains the key-value pair.

   Accessing any object could turn out to be cumbersome if the entries are present inside the lists. These linked lists were converted to binary trees from Java 8 version.

   HashMap handles collision cases very efficiently using a concept known as chaining, which suggests storing the values in a linked list or a binary tree as
   indicated by the conversion of methodology from Java 8.

Q9.Distinguish between a hashmap and a Treemap.
   HashMap implements Map<K, V>, Cloneable and Serializable interface. It extends AbstractMap<K, V> class. It belongs to java.util package. 
   It works on the prionciple of Hashing.
   TreeMap class extends AbstractMap<K, V> class and implements NavigableMap<K, V >, Cloneable, and Serializable interface. TreeMap is an example
   of a SortedMap. It is implemented by the Red-Black tree, which means that the order of the keys is sorted.

Q10.Define LinkedHashMap in Java
    The LinkedHashMap Class is just like HashMap with an additional feature of maintaining an order of elements inserted into it. 
    HashMap provided the advantage of quick insertion, search, and deletion but it never maintained the track and order of insertion, 
    which the LinkedHashMap provides where the elements can be accessed in their insertion order.